[
  
  {
    "title": "Jekyll로 블로그 시작하기: 테스트 포스팅",
    "url": "/posts/jekyll/",
    "categories": "Blogging, Jekyll",
    "tags": "jekyll, blogging, tutorial",
    "date": "2023-10-15 10:00:00 +0900",
    





    
    "snippet": "Jekyll이란?Jekyll은 정적 사이트 생성기로, 블로그나 웹사이트를 쉽게 만들 수 있도록 도와줍니다. 특히 GitHub Pages와 잘 연동되어 많은 개발자들이 사용하고 있습니다.Jekyll의 장점  간편한 설정: Jekyll은 간단한 설정 파일을 통해 사이트의 구조를 정의할 수 있습니다.  Markdown 지원: Markdown을 사용하여 쉽게...",
    "content": "Jekyll이란?Jekyll은 정적 사이트 생성기로, 블로그나 웹사이트를 쉽게 만들 수 있도록 도와줍니다. 특히 GitHub Pages와 잘 연동되어 많은 개발자들이 사용하고 있습니다.Jekyll의 장점  간편한 설정: Jekyll은 간단한 설정 파일을 통해 사이트의 구조를 정의할 수 있습니다.  Markdown 지원: Markdown을 사용하여 쉽게 글을 작성할 수 있습니다.  빠른 속도: 정적 사이트이기 때문에 로딩 속도가 빠릅니다.테스트 포스팅 작성하기이 포스팅은 Jekyll을 사용하여 작성한 테스트 포스팅입니다. Jekyll의 기본적인 사용법을 익히고, 블로그를 시작하는 데 도움이 되기를 바랍니다.1. 파일 생성먼저 _posts 디렉토리에 새로운 파일을 생성합니다. 파일명은 YYYY-MM-DD-title.md 형식으로 작성합니다.2. Front Matter 설정파일의 맨 위에 YAML 형식의 Front Matter를 추가하여 포스트의 메타데이터를 설정합니다.---title: \"Jekyll로 블로그 시작하기: 테스트 포스팅\"date: 2023-10-15 10:00:00 +0900categories: [Blogging, Jekyll]tags: [jekyll, blogging, tutorial]---3. 포스트 내용 작성Markdown을 사용하여 포스트의 내용을 작성합니다. 예를 들어, Jekyll의 장점이나 사용법에 대해 설명할 수 있습니다.결론Jekyll을 사용하면 블로그를 쉽게 시작할 수 있습니다. 이 포스팅이 Jekyll을 이해하는 데 도움이 되었기를 바랍니다. 앞으로 더 많은 포스팅을 통해 Jekyll의 다양한 기능을 탐구해보세요!"
  },
  
  {
    "title": "Kream 사이트 클론 프로젝트",
    "url": "/posts/kream_clone_project/",
    "categories": "Project",
    "tags": "Django, project, python, mysql, git, backend, frontend",
    "date": "2022-01-06 10:00:00 +0900",
    





    
    "snippet": "SHOEKREAM Project  PREMIUM BIIDINGS🎇 팀명 : shoekream - 슈크림  의류 경매 서비스를 제공하는 KREAM을 모티브로 제작하게 된 SHOE-KREAM 팀의 프론트엔드 레포지토리 입니다.짧은 프로젝트 기간동안 개발에 집중해야 하므로 디자인/기획 부분만 클론했습니다.개발은 초기 세팅부터 전부 직접 구현했으며, 백앤드와...",
    "content": "SHOEKREAM Project  PREMIUM BIIDINGS🎇 팀명 : shoekream - 슈크림  의류 경매 서비스를 제공하는 KREAM을 모티브로 제작하게 된 SHOE-KREAM 팀의 프론트엔드 레포지토리 입니다.짧은 프로젝트 기간동안 개발에 집중해야 하므로 디자인/기획 부분만 클론했습니다.개발은 초기 세팅부터 전부 직접 구현했으며, 백앤드와 연결하여 실제 사용할 수 있는 서비스 수준으로 개발할 수 있도록 2주간 고군분투 하였습니다.프로젝트 선정이유  조사결과, 해당 사이트의 경매 입찰 기능과 결제 플로우, 차트 구현, 상품리스트 필터 구현 등 배울 점이 많다고 판단하여 선정하게 되었습니다.📅 개발 기간 및 개발 인원  개발 기간 : 2021/10/18 ~ 2021/10/29  개발 인원  👨‍👧‍👦 Front-End 4명 : 김현진, 박산성, 이선호, 하상영 👨‍👧‍👦 Back-End 3명 : 박치훈, 양가현, 송영록  Back-end github 링크🎬 프로젝트 구현 영상  🔗 [구현영상] : https://youtu.be/N63MUdDmDFI⚙ 적용 기술  Front-End : HTML5, CSS3, React, SASS, JSX  Back-End : Python, Django, MySQL, jwt, bcypt, AWS RDS, AWS EC2  Common : Git, Github, Slack, Trello, Postman or Insomnia🗜 데이터베이스 Diagram(클릭 시 해당 링크로 이동합니다)💻 구현 기능Endpoint documentation - Postman APIBACKEND송영록  상세 페이지      구매, 판매 가격 입찰데이터 join하여 filter로 출력    제품이 없을 경우 ‘product_id_not_exist’ 반환    주문 목록은 주문일시가 빠른 시간부터 정렬    좋아요(관심상품) 클릭 수를 len()함수를 써서 전체 숫자 출력    제품 ID, 제품명, 브랜드명, 제품 발매가격, 모델 번호, 해당 제품 이미지, 현재 가격(입찰 없을 경우 none), 구매가격, 판매가격, 총 관심상품 등록 수  »&gt; dictionary json 반환    상품 리스트 출력 API(ProductView)      프론트 요청시 제품 데이터 40개 제한 출력(offset,limit)    제품 ID, 브랜드명, 제품명, 썸네일이미지, 제품 가격(살떄), 제품 발매가격 »&gt; dictionary json 반환    브랜드 리스트 출력 API(BrandView)      메인 페이지, 제품 페이지 상단 브랜드 출력을 위하여 API 작성  ❗ Reference  이 프로젝트는 KREAM 사이트를 참조하여 학습목적으로 만들었습니다.  실무수준의 프로젝트이지만 학습용으로 만들었기 때문에 이 코드를 활용하여 이득을 취하거나 무단 배포할 경우 법적으로 문제될 수 있습니다.  이 프로젝트에서 사용하고 있는 사진 모두는 copyright free 사이트들의 이미지들을 취합 및 canva 에서 직접 제작한 이미지들로 제작되었습니다."
  },
  
  {
    "title": "Spao 사이트 클론 프로젝트",
    "url": "/posts/Spao_clone_project/",
    "categories": "Project",
    "tags": "Django, project, python, mysql, git, backend, frontend",
    "date": "2022-01-05 10:00:00 +0900",
    





    
    "snippet": "  Trends meet Basic Be Transic! - 스파오(SPAO) 사이트 클론.🎇 팀명 : SPAOGAME - 스파오게임  팀원들 각자의 기술에 익숙해지는 것을 목표로 하여, 페이지 단위로 개발.  팀원들 수준별로 적절한 역할 분담과 애자일한 스크럼 방식의 미팅, 그리고 규칙적이고 능동적인 의사소통으로 프로젝트를 성공적으로 마무리.  기획...",
    "content": "  Trends meet Basic Be Transic! - 스파오(SPAO) 사이트 클론.🎇 팀명 : SPAOGAME - 스파오게임  팀원들 각자의 기술에 익숙해지는 것을 목표로 하여, 페이지 단위로 개발.  팀원들 수준별로 적절한 역할 분담과 애자일한 스크럼 방식의 미팅, 그리고 규칙적이고 능동적인 의사소통으로 프로젝트를 성공적으로 마무리.  기획 과정 없이 짧은 기간 안에 기술 습득 및 기본 기능 구현에 집중하기 위해서 SPAO 사이트를 참고.📅 개발 기간 및 개발 인원  개발 기간 : 2021-10-05 ~ 2021-10-15 (공휴일 포함)  개발 인원  👨‍👧‍👦 Front-End 3명 : 강성구, 김현진, 정경훈  👨‍👧‍👦 Back-End 3명 : 김주현, 이기용, 송영록🎬 프로젝트 구현 영상  🔗 [영상 링크] : 추후 재업데이트 예정⚙ 적용 기술  Front-End : HTML5, CSS3, React, SASS, JSX  Back-End : Python, Django, MySQL, jwt, bcypt, AWS RDS, AWS EC2  Common : Git, Github, Slack, Trello, Postman or Insomnia🗜 데이터베이스 Diagram(클릭 시 해당 링크로 이동합니다)💻 구현 기능BACKEND김주현  상품상세페이지 후기 및 댓글 등록 기능 구현  메인페이지 검색기능 구현이기용  offset과 limit을 이용한 페이징기법으로 상품 목록 조회 API  최신순, 가격높은순, 가격낮은순, 이름순 정렬을 이용한 상품 목록 조회 API  특정 상품 클릭 시, 상품 상세정보 보여주는 상세정보 API송영록  회원가입 API  jwt와 bcrpyt를 이용한 로그인 API  장바구니 상품 추가, 수정, 삭제 APIFRONTEND김현진  상품리스트 레이아웃 구현  페이지네이션으로 상품데이터를 받아오는 기능  높은가격순, 낮은가격순,이름순,최신등록순,컬러순 ordering 기능  상세페이지의 레이아웃 구현  query string url 을 사용한 상세페이지 연결 구현  fetch post로 장바구니페이지에 데이터 전달 기능  review form 레이아웃 구현  fetch get/delete를 통한 후기 게시글, 댓글 등록/삭제 기능강성구  메인페이지 레이아웃 구현  네브바 각 메뉴별 호버 시, 메뉴에 맞는 내용들 드롭다운(Two Depth)  스크롤 감지시 네브바 색 변경  Carousel방식으로 버튼 클릭시 이미지 너비 규격만큼 이동(마지막 사진에서는 첫번째 사진으로 이동)  radio 형식으로 사진 이동기능 추가  페이지업,페이지 다운 컴포넌트 화면 우측하단 고정정경훈  로그인페이지 레이아웃 구현  input의 onChange이벤트를 이용해 값을 저장하는 기능 구현  유효성검사를 통해 이메일 형식의 아이디와 특수문자를 포함한 8자 이상의 비밀번호를 입력했을 시 로그인이 가능하도록 기능구현하고 버튼의 활성화 이벤트를 구현  토큰을 받아왔을 때, alert을 이용해 ‘로그인이 되었습니다’ 라는 창을 띄우는 이벤트 구현      버튼의 onClick 이벤트를 이용해 회원가입 페이지로 이동할 수 있도록 이벤트 구현    회원가입 페이지 레이아웃 구현  input의 onChange이벤트를 이용해 값을 저장하는 기능 구현(로그인과 동일)  필수항목 입력시에만 회원가입을 진행할 수 있도록 유효성검사(아이디 : 이메일형식 / 비밀번호 : 영문 특수문자 포함 8자 이상 / 남,여 성별 / 이메일 / 이름 / 비밀번호 및 비밀번호 확인 / 생년월일 입력) 기능 구현  input태그가 아닌 select를 이용한 사용자가 입력 사항을 입력할 수 있도록 페이지 구성      회원가입 완료 후 로그인 페이지로 이동하는 이벤트를 구현하고 alert를 이용해 ‘회원가입이 완료되었습니다’ 창을 띄울수 있도록 구성    장바구니 페이지 레이아웃 구현  각각의 빈 장바구니와 상품을 담는 장바구니의 컴포넌트화 진행  조건부 렌더링을 통해 장바구니에 상품이 담기지 않았을 시 비어있는 화면을, 상품이 담겼을 때는 상품을 담는 페이지를 구성⌨ EndPoint  POST/users/signup (회원가입)  POST/users/signin (로그인)  POST/orders/cart (장바구니 생성)  GET/orders/cart (장바구니 조회)  PATCH/orders/cart (장바구니 수정)  DEL/orders/cart (장바구니 삭제)  POST/postings  (후기 등록)  POST/postings/comments (댓글 등록)  POST/postings/ (댓글 삭제)  POST/products/menus (메뉴 항목 추가)  GET/products/menus (메뉴 항목 리스트 조회)  POST/products/categories (카테고리 항목 추가)  GET/products// (특정 메뉴별 카테고리 항목 리스트 조회)  POST/products (상품 등록)  GET/products// (특정 메뉴-카테고리별 상품 리스트 조회)  GET/products/ (특정 상품에 대한 상세페이지)❗ Reference  이 프로젝트는 SPAO 사이트를 참조하여 학습목적으로 만들었습니다.  실무 수준의 프로젝트이지만 학습용으로 만들었기 때문에 이 코드를 활용하여 이득을 취하거나 무단 배포할 경우 법적으로 문제가 될 수 있습니다.🙏 help  프로젝트 상품 이미지 출처원 : MIDEOCK-미덕 , SARNO-사르노 *이미지 사용을 허가해주신 대표님들께 감사합니다.  해당 프로젝트의 이미지를 활용하여 이득을 취하거나 무단 배포할 경우 법적으로 문제가 될 수 있습니다."
  },
  
  {
    "title": "Django project 초기세팅",
    "url": "/posts/Django_Project_%EC%B4%88%EA%B8%B0%EC%84%B8%ED%8C%85/",
    "categories": "Django",
    "tags": "Django",
    "date": "2022-01-04 10:00:00 +0900",
    





    
    "snippet": "Django Project를 위한 초기세팅가상환경 생성프로젝트 마다 독립적인 패키지의 관리를 위해 새로운 가상환경을 생성해서 사용!#가상환경 생성conda create -n \"가상환경 이름\" python=3.8conda activate \"가상환경 이름\"Database 생성mysql을 미리 설치해야 한다$ mysql -u root -p # 명령어 입력 ...",
    "content": "Django Project를 위한 초기세팅가상환경 생성프로젝트 마다 독립적인 패키지의 관리를 위해 새로운 가상환경을 생성해서 사용!#가상환경 생성conda create -n \"가상환경 이름\" python=3.8conda activate \"가상환경 이름\"Database 생성mysql을 미리 설치해야 한다$ mysql -u root -p # 명령어 입력 후 mysql로 전환# 데이터베이스 생성mysql&gt; create database NAME character set utf8mb4 collate utf*mb4_general_ci; Project Python Package 설치$ pip install django# 이후에 MySQL server에 접속하기 위한 package$ pip install mysqlclient  (중요) mysql 설치되어 있는지 먼저 확인# 맥북은 mysqlclient를 다운받으려면 오류가 난다 그러므로 PyMySQL을 다운받자$ pip install PyMySQL#!밑글에 pymysql 세팅법을 적어놓음Django Project 생성$ django-admin startproject westarbucks$ cd westarbucksSettings.py 설정. IP허용\tALLOWED_HOSTS = ['*']. 추가로 westarbucks/urls.py를 아래와 같이 수정from django.urls import pathurlpatterns = []. 주석처리(admin, csrf, auth)my_settings.py 생성(DATABASES,SECRET_KEY). django 설정에 존재하는 내용 중 SECRET_KEY, DATABASE 등은 절대 settings.py에 두면 안됩니다.. 그대로 깃이나 오픈클라우드에 올려버리면 해킹을 당하기가 쉽습니다. 아니 당합니다!. 그래서 별도의 참조용 파이썬 파일(my_settings.py)을 생성해서, 참조하는 방법으로 진행cd '생성한 프로젝트 폴더명'touch my_settings.py. 파일에 실제 쓰여지는 내용#예시DATABASES = {    'default' : {        'ENGINE': 'django.db.backends.mysql',        'NAME': 'DATABASE 명',        'USER': 'DB접속 계정명',        'PASSWORD': 'DB접속용 비밀번호',        'HOST': '127.0.0.1',        'PORT': '3306',    }}SECRET_KEY = '시크릿키' #settings.py에 있는 secret_key 를 사용합니다.settings.py &lt;-&gt; my_settings.py 연동#intel 맥북from pathlib\t\timport Path #기존에 settings.py에 있는 코드from my_settings\timport DATABASES, SECRET_KEYDATABASES = DATABASESSECRET_KEY = SECRET_KEY#### m1 맥북!!# $ pip install PyMySQL# 으로 PyMySQL을 다운받는거 잊지말자from pathlib        import Path #기존에 settings.py 에 있는 코드from my_settings import DATABASES, SECRET_KEYimport pymysqlpymysql.install_as_MySQLdb().corsheaderspip install django-cors-headers. 설치했다면 settings.py에 INSTALLED_APPS 안에 추가INSTALLED_APPS = [...\t\t'corsheaders']. middleware 추가MIDDLEWARE = [\t...\t\t'corsheaders.middleware.CorsMiddleware',\t...]. CORS 추가 설정##CORSCORS_ORIGIN_ALLOW_ALL=TrueCORS_ALLOW_CREDENTIALS = TrueCORS_ALLOW_METHODS = (    'DELETE',    'GET',    'OPTIONS',    'PATCH',    'POST',    'PUT',)CORS_ALLOW_HEADERS = (    'accept',    'accept-encoding',    'authorization',    'content-type',    'dnt',    'origin',    'user-agent',    'x-csrftoken',    'x-requested-with',)서버 정상 동작 확인. 서버 동작(Runserver)을 통한 오류 검증python manage.py runserver. 정상 동작 예시이제 프로젝트를 위한 초기 세팅은 끝났다~프로젝트를 진행해보자!"
  }
  
]

